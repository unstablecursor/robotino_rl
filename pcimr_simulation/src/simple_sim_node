#!/usr/bin/env python3

import rospy
import rospkg
import numpy as np
import os
from threading import Lock

from std_msgs.msg import String
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Point, Pose, Quaternion
from nav_msgs.msg import OccupancyGrid, MapMetaData
from visualization_msgs.msg import Marker
from pcimr_simulation.srv import InitPos

from robot_sim.discrete_robot_sim import RobotSimulator2D
from robot_sim.map_loader import load_map


def numpy_to_occupancy_grid(arr, info=None):
    if not len(arr.shape) == 2:
        raise TypeError('Array must be 2D')

    # Adjust values
    arr = arr.astype('float64')
    factor = 100/np.max(arr)
    arr[arr > 0] *= factor

    arr = np.array(np.transpose(arr), dtype=np.int8)

    grid = OccupancyGrid()
    if isinstance(arr, np.ma.MaskedArray):
        # We assume that the masked value are already -1, for speed
        arr = arr.data
    grid.data = arr.ravel()
    grid.info = info or MapMetaData()
    grid.info.height = arr.shape[0]
    grid.info.width = arr.shape[1]

    return grid


class SimpleSimNode:
    """
    A node, capsuling the functionality from the simple robot simulator.
    """

    def __init__(self, num_sensors: int = 4):
        """
        Initializes a SimpleSimNode instance, including initialization of the sim node itself and all
        Publishers/Subscribers.

        @param num_sensors: The number of sensors used for the simulation (4/8).
        """
        # Initialize member variables
        self.sim_lock = Lock()
        # get an instance of RosPack with the default search paths
        rospack = rospkg.RosPack()
        # get the file path for rospy_tutorials
        self.pkg_path = rospack.get_path('pcimr_simulation')
        self.map_path = os.path.join(self.pkg_path, 'resources/map_tutorial_03.png')

        # Retrieve ROS Params
        robot_move_prob = rospy.get_param('~robot_move_probabilities', [0.9, 0.04, 0.04, 0.0, 0.02])

        # Initialize Publishers
        self.pub_robot_position = rospy.Publisher('/robot_pos', Point, queue_size=10)
        self.pub_scan = rospy.Publisher('/scan', LaserScan, queue_size=10)
        self.pub_robot_pos_marker = rospy.Publisher('/visualization/robot_pos', Marker, queue_size=10)
        self.pub_map = rospy.Publisher('/map', OccupancyGrid, queue_size=10)

        # Initialize Subscribers
        self.sub_move = rospy.Subscriber('/move', String, self.cb_move)

        # Initialize Services
        self.srv_init_pos = rospy.Service('init_pos', InitPos, self.handle_init_pos)

        # Initialize Robot Simulator
        self.sim = RobotSimulator2D(world=load_map(self.map_path), pos=(2, 2), num_sensors=4, move_variance=np.array(robot_move_prob))

        # Setup messages for publishing
        self.msg_robot_position = Point()
        self.msg_robot_position.z = 0
        self.msg_scan = LaserScan()
        self.msg_scan.header.seq = 0
        self.msg_scan.header.frame_id = 'world'
        self.msg_scan.angle_min = -np.pi
        self.msg_scan.angle_max = np.pi
        self.msg_scan.angle_increment = 2*np.pi/num_sensors
        self.msg_scan.scan_time = 1
        self.msg_scan.range_min = 0
        self.msg_scan.range_max = 30

        self.msg_pos_marker = Marker()
        self.msg_pos_marker.header.frame_id = "map"
        self.msg_pos_marker.ns = "robot_pos"
        self.msg_pos_marker.id = 0
        self.msg_pos_marker.type = Marker.CUBE
        self.msg_pos_marker.action = Marker.ADD
        self.msg_pos_marker.scale.x = 1
        self.msg_pos_marker.scale.y = 1
        self.msg_pos_marker.scale.z = 0.2
        self.msg_pos_marker.color.a = 1.0
        self.msg_pos_marker.color.r = 0.0
        self.msg_pos_marker.color.g = 1.0
        self.msg_pos_marker.color.b = 0.0
        self.msg_pos_marker.pose.orientation = Quaternion(0, 0, 0, 1)

        self.msg_map = OccupancyGrid()
        self.msg_map.header.frame_id = 'map'
        self.msg_map.header.seq = 0
        self.msg_map.info.map_load_time = rospy.Time.now()
        self.msg_map.info.resolution = 1
        self.msg_map.info.height = self.sim.size_y
        self.msg_map.info.width = self.sim.size_x


    def cb_move(self, msg):
        """
        A callback for retrieving new movement commands for the robot in the simulator.

        @param msg: The message containing the movement command (N, S, E, W).
        """
        self.sim_lock.acquire()
        rospy.loginfo(f'Sending move command to simulator: {msg.data}')
        success = self.sim.move(msg.data)
        if success:
            rospy.loginfo(f'Successfully moved the robot into "{msg.data}".')
        else:
            rospy.logwarn(f'Could not move the robot into "{msg.data}".')
        self.sim_lock.release()

    def handle_init_pos(self, req):
        rospy.logdebug(f'Initializing position of robot to ({req.x}, {req.y})')
        if req.x < 0 or req.y < 0:
            # Random position initialization
            success = self.sim.init_position()
        else:
            # Position initialization with given values x, y
            success = self.sim.init_position((req.x, req.y))

        if not success:
            rospy.logwarn(f'Position initialization to ({req.x}, {req.y}) failed.')
        else:
            rospy.loginfo(f'Successfully initialized position to ({self.sim.pos[0]}, {self.sim.pos[1]}).')
        return success

    def run(self, rate: float = 1):
        """
        Periodically publishes the information from the simulator on the defined topics.

        @param rate: The rate at which the topics are published.
        """
        while not rospy.is_shutdown():
            # Update message data
            self.msg_robot_position.x = self.sim.pos[0]
            self.msg_robot_position.y = self.sim.pos[1]

            self.msg_scan.ranges = self.sim.sense()

            self.msg_pos_marker.pose.position.x = self.sim.pos[0]+0.5
            self.msg_pos_marker.pose.position.y = self.sim.pos[1]+0.5

            self.msg_map = numpy_to_occupancy_grid(self.sim.world, info=self.msg_map.info)

            # Publish messages
            self.pub_robot_position.publish(self.msg_robot_position)
            self.pub_scan.publish(self.msg_scan)
            self.pub_robot_pos_marker.publish(self.msg_pos_marker)
            self.pub_map.publish(self.msg_map)
            
            # Sleep for a while before publishing new messages. 
            if rate:
                rospy.sleep(1/rate)


if __name__ == "__main__":
    rospy.init_node('simple_sim_node')

    simple_sim_node = SimpleSimNode(num_sensors=4)
    simple_sim_node.run(rate=1)
